"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ QazPost
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
from utils.logger import setup_logger
from parsers.html_parser import HTMLParser
from processors.excel_processor import ExcelProcessor
from processors.matcher import AddressMatcher
import config

logger = setup_logger()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        
        # 1. –ü–∞—Ä—Å–∏–Ω–≥ HTML —Ñ–∞–π–ª–æ–≤
        logger.info("–≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ HTML —Ñ–∞–π–ª–æ–≤...")
        html_parser = HTMLParser()
        offices_data = html_parser.parse_html_files()
        
        if not offices_data:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ HTML —Ñ–∞–π–ª–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É regions_html/")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats = html_parser.get_statistics()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {stats['total_settlements']} –ø–æ—Å–µ–ª–µ–Ω–∏–π, "
                   f"{stats['total_offices']} –æ—Ñ–∏—Å–æ–≤")
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞
        logger.info("–≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞...")
        excel_processor = ExcelProcessor()
        workbook, worksheet = excel_processor.load_workbook()
        
        total_rows = excel_processor.get_total_rows()
        logger.info(f"–ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_rows} –∑–∞–ø–∏—Å–µ–π")
        
        # 3. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
        logger.info("–≠—Ç–∞–ø 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤...")
        matcher = AddressMatcher(offices_data)
        
        results = []
        processed_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å EXCEL_START_ROW + 1 (1-based indexing)
        for row_num in range(config.EXCEL_START_ROW + 1, worksheet.max_row + 1):
            address_data = excel_processor.read_address_row(row_num)
            
            if address_data:
                result = matcher.match_address(address_data)
                results.append(result)
                processed_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å—Ç—Ä–æ–∫
                if processed_count % 100 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{total_rows}")
        
        logger.info(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}")
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("–≠—Ç–∞–ø 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        excel_processor.save_results(results)
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("–≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        print_statistics(results)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Excel
        excel_processor.close()
        
        logger.info("=== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===")
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {config.OUTPUT_EXCEL}")
        print(f"üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏: {config.LOG_FILE}")
        
    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª addresses.xlsx –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ tables/")
        
    except PermissionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–ó–∞–∫—Ä–æ–π—Ç–µ Excel —Ñ–∞–π–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª: {config.LOG_FILE}")
        raise

def print_statistics(results):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    Args:
        results (list): –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    if not results:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {'–î–∞': 0, '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å': 0, '–ù–µ—Ç': 0}
    
    for result in results:
        if result and 'status' in result:
            status = result['status']
            if status in stats:
                stats[status] += 1
    
    total = sum(stats.values())
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*50)
    
    for status, count in stats.items():
        percentage = (count / total * 100) if total > 0 else 0
        emoji = {'–î–∞': '‚úÖ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å': '‚ö†Ô∏è', '–ù–µ—Ç': '‚ùå'}[status]
        
        message = f"{emoji} {status}: {count} ({percentage:.1f}%)"
        print(message)
        logger.info(message)
    
    print("-" * 50)
    summary = f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total} –∑–∞–ø–∏—Å–µ–π"
    print(summary)
    logger.info(summary)

if __name__ == '__main__':
    main()